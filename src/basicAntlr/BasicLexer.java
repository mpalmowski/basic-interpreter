// Generated from D:/Workspace/IntelliJ/basicInterpreter\Basic.g4 by ANTLR 4.7
package basicAntlr;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class BasicLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.7", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		LET=1, DATA=2, READ=3, PRINT=4, GOTO=5, IF=6, THEN=7, FOR=8, TO=9, STEP=10, 
		NEXT=11, DEF=12, REM=13, STOP=14, END=15, SIN=16, COS=17, TAN=18, ATN=19, 
		EXP=20, ABS=21, LOG=22, SQR=23, RND=24, INT=25, ID=26, NUMBER=27, FLOAT=28, 
		STRING=29, PLUS=30, MINUS=31, MULTIPLY=32, DIVIDE=33, POWER=34, LESS=35, 
		LESS_OR_EQUAL=36, EQUAL=37, GREATER=38, GREATER_OR_EQUAL=39, NOT_EQUAL=40, 
		COMMA=41, SEMICOLON=42, DOT=43, LPAREN=44, RPAREN=45, WHITESPACE=46, NEWLINE=47;
	public static String[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] ruleNames = {
		"LET", "DATA", "READ", "PRINT", "GOTO", "IF", "THEN", "FOR", "TO", "STEP", 
		"NEXT", "DEF", "REM", "STOP", "END", "SIN", "COS", "TAN", "ATN", "EXP", 
		"ABS", "LOG", "SQR", "RND", "INT", "ID", "NUMBER", "FLOAT", "STRING", 
		"LETTER", "DIGIT", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "POWER", "LESS", 
		"LESS_OR_EQUAL", "EQUAL", "GREATER", "GREATER_OR_EQUAL", "NOT_EQUAL", 
		"COMMA", "SEMICOLON", "DOT", "LPAREN", "RPAREN", "WHITESPACE", "NEWLINE"
	};

	private static final String[] _LITERAL_NAMES = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "'+'", "'-'", "'*'", "'/'", "'^'", 
		"'<'", "'<='", "'='", "'>'", "'>='", "'<>'", "','", "';'", "'.'", "'('", 
		"')'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, "LET", "DATA", "READ", "PRINT", "GOTO", "IF", "THEN", "FOR", "TO", 
		"STEP", "NEXT", "DEF", "REM", "STOP", "END", "SIN", "COS", "TAN", "ATN", 
		"EXP", "ABS", "LOG", "SQR", "RND", "INT", "ID", "NUMBER", "FLOAT", "STRING", 
		"PLUS", "MINUS", "MULTIPLY", "DIVIDE", "POWER", "LESS", "LESS_OR_EQUAL", 
		"EQUAL", "GREATER", "GREATER_OR_EQUAL", "NOT_EQUAL", "COMMA", "SEMICOLON", 
		"DOT", "LPAREN", "RPAREN", "WHITESPACE", "NEWLINE"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public BasicLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "Basic.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getChannelNames() { return channelNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\61\u01bf\b\1\4\2"+
		"\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4"+
		"\13\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22"+
		"\t\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31"+
		"\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t"+
		" \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t"+
		"+\4,\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\3\2\3\2\3\2\3"+
		"\2\3\2\3\2\5\2l\n\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\5\3v\n\3\3\4\3\4\3"+
		"\4\3\4\3\4\3\4\3\4\3\4\5\4\u0080\n\4\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3"+
		"\5\3\5\5\5\u008c\n\5\3\6\3\6\3\6\3\6\7\6\u0092\n\6\f\6\16\6\u0095\13\6"+
		"\3\6\3\6\3\6\3\6\3\6\3\6\7\6\u009d\n\6\f\6\16\6\u00a0\13\6\3\6\3\6\5\6"+
		"\u00a4\n\6\3\7\3\7\3\7\3\7\5\7\u00aa\n\7\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3"+
		"\b\5\b\u00b4\n\b\3\t\3\t\3\t\3\t\3\t\3\t\5\t\u00bc\n\t\3\n\3\n\3\n\3\n"+
		"\5\n\u00c2\n\n\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\5\13\u00cc\n\13"+
		"\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\5\f\u00d6\n\f\3\r\3\r\3\r\3\r\3\r\3\r"+
		"\5\r\u00de\n\r\3\16\3\16\3\16\3\16\3\16\3\16\5\16\u00e6\n\16\3\17\3\17"+
		"\3\17\3\17\3\17\3\17\3\17\3\17\5\17\u00f0\n\17\3\20\3\20\3\20\3\20\3\20"+
		"\3\20\5\20\u00f8\n\20\3\21\3\21\3\21\3\21\3\21\3\21\5\21\u0100\n\21\3"+
		"\22\3\22\3\22\3\22\3\22\3\22\5\22\u0108\n\22\3\23\3\23\3\23\3\23\3\23"+
		"\3\23\5\23\u0110\n\23\3\24\3\24\3\24\3\24\3\24\3\24\5\24\u0118\n\24\3"+
		"\25\3\25\3\25\3\25\3\25\3\25\5\25\u0120\n\25\3\26\3\26\3\26\3\26\3\26"+
		"\3\26\5\26\u0128\n\26\3\27\3\27\3\27\3\27\3\27\3\27\5\27\u0130\n\27\3"+
		"\30\3\30\3\30\3\30\3\30\3\30\5\30\u0138\n\30\3\31\3\31\3\31\3\31\3\31"+
		"\3\31\5\31\u0140\n\31\3\32\3\32\3\32\3\32\3\32\3\32\5\32\u0148\n\32\3"+
		"\33\3\33\5\33\u014c\n\33\3\33\3\33\3\33\7\33\u0151\n\33\f\33\16\33\u0154"+
		"\13\33\3\34\6\34\u0157\n\34\r\34\16\34\u0158\3\34\3\34\5\34\u015d\n\34"+
		"\3\34\6\34\u0160\n\34\r\34\16\34\u0161\7\34\u0164\n\34\f\34\16\34\u0167"+
		"\13\34\3\35\7\35\u016a\n\35\f\35\16\35\u016d\13\35\3\35\3\35\6\35\u0171"+
		"\n\35\r\35\16\35\u0172\3\35\3\35\5\35\u0177\n\35\3\35\6\35\u017a\n\35"+
		"\r\35\16\35\u017b\7\35\u017e\n\35\f\35\16\35\u0181\13\35\3\36\3\36\3\36"+
		"\3\36\7\36\u0187\n\36\f\36\16\36\u018a\13\36\3\36\3\36\3\37\3\37\3 \3"+
		" \3!\3!\3\"\3\"\3#\3#\3$\3$\3%\3%\3&\3&\3\'\3\'\3\'\3(\3(\3)\3)\3*\3*"+
		"\3*\3+\3+\3+\3,\3,\3-\3-\3.\3.\3/\3/\3\60\3\60\3\61\3\61\3\61\3\61\3\62"+
		"\5\62\u01ba\n\62\3\62\3\62\5\62\u01be\n\62\3\u0188\2\63\3\3\5\4\7\5\t"+
		"\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23"+
		"%\24\'\25)\26+\27-\30/\31\61\32\63\33\65\34\67\359\36;\37=\2?\2A C!E\""+
		"G#I$K%M&O\'Q(S)U*W+Y,[-]._/a\60c\61\3\2\6\4\2GGgg\4\2C\\c|\3\2\62;\4\2"+
		"\13\13\"\"\2\u01e8\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13"+
		"\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2"+
		"\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2"+
		"!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3"+
		"\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2"+
		"\29\3\2\2\2\2;\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I"+
		"\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2"+
		"\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\2a\3\2\2\2"+
		"\2c\3\2\2\2\3k\3\2\2\2\5u\3\2\2\2\7\177\3\2\2\2\t\u008b\3\2\2\2\13\u00a3"+
		"\3\2\2\2\r\u00a9\3\2\2\2\17\u00b3\3\2\2\2\21\u00bb\3\2\2\2\23\u00c1\3"+
		"\2\2\2\25\u00cb\3\2\2\2\27\u00d5\3\2\2\2\31\u00dd\3\2\2\2\33\u00e5\3\2"+
		"\2\2\35\u00ef\3\2\2\2\37\u00f7\3\2\2\2!\u00ff\3\2\2\2#\u0107\3\2\2\2%"+
		"\u010f\3\2\2\2\'\u0117\3\2\2\2)\u011f\3\2\2\2+\u0127\3\2\2\2-\u012f\3"+
		"\2\2\2/\u0137\3\2\2\2\61\u013f\3\2\2\2\63\u0147\3\2\2\2\65\u014b\3\2\2"+
		"\2\67\u0156\3\2\2\29\u016b\3\2\2\2;\u0182\3\2\2\2=\u018d\3\2\2\2?\u018f"+
		"\3\2\2\2A\u0191\3\2\2\2C\u0193\3\2\2\2E\u0195\3\2\2\2G\u0197\3\2\2\2I"+
		"\u0199\3\2\2\2K\u019b\3\2\2\2M\u019d\3\2\2\2O\u01a0\3\2\2\2Q\u01a2\3\2"+
		"\2\2S\u01a4\3\2\2\2U\u01a7\3\2\2\2W\u01aa\3\2\2\2Y\u01ac\3\2\2\2[\u01ae"+
		"\3\2\2\2]\u01b0\3\2\2\2_\u01b2\3\2\2\2a\u01b4\3\2\2\2c\u01bd\3\2\2\2e"+
		"f\7N\2\2fg\7G\2\2gl\7V\2\2hi\7n\2\2ij\7g\2\2jl\7v\2\2ke\3\2\2\2kh\3\2"+
		"\2\2l\4\3\2\2\2mn\7F\2\2no\7C\2\2op\7V\2\2pv\7C\2\2qr\7f\2\2rs\7c\2\2"+
		"st\7v\2\2tv\7c\2\2um\3\2\2\2uq\3\2\2\2v\6\3\2\2\2wx\7T\2\2xy\7G\2\2yz"+
		"\7C\2\2z\u0080\7F\2\2{|\7t\2\2|}\7g\2\2}~\7c\2\2~\u0080\7f\2\2\177w\3"+
		"\2\2\2\177{\3\2\2\2\u0080\b\3\2\2\2\u0081\u0082\7R\2\2\u0082\u0083\7T"+
		"\2\2\u0083\u0084\7K\2\2\u0084\u0085\7P\2\2\u0085\u008c\7V\2\2\u0086\u0087"+
		"\7r\2\2\u0087\u0088\7t\2\2\u0088\u0089\7k\2\2\u0089\u008a\7p\2\2\u008a"+
		"\u008c\7v\2\2\u008b\u0081\3\2\2\2\u008b\u0086\3\2\2\2\u008c\n\3\2\2\2"+
		"\u008d\u008e\7I\2\2\u008e\u008f\7Q\2\2\u008f\u0093\3\2\2\2\u0090\u0092"+
		"\7\"\2\2\u0091\u0090\3\2\2\2\u0092\u0095\3\2\2\2\u0093\u0091\3\2\2\2\u0093"+
		"\u0094\3\2\2\2\u0094\u0096\3\2\2\2\u0095\u0093\3\2\2\2\u0096\u0097\7V"+
		"\2\2\u0097\u00a4\7Q\2\2\u0098\u0099\7i\2\2\u0099\u009a\7q\2\2\u009a\u009e"+
		"\3\2\2\2\u009b\u009d\7\"\2\2\u009c\u009b\3\2\2\2\u009d\u00a0\3\2\2\2\u009e"+
		"\u009c\3\2\2\2\u009e\u009f\3\2\2\2\u009f\u00a1\3\2\2\2\u00a0\u009e\3\2"+
		"\2\2\u00a1\u00a2\7v\2\2\u00a2\u00a4\7q\2\2\u00a3\u008d\3\2\2\2\u00a3\u0098"+
		"\3\2\2\2\u00a4\f\3\2\2\2\u00a5\u00a6\7K\2\2\u00a6\u00aa\7H\2\2\u00a7\u00a8"+
		"\7k\2\2\u00a8\u00aa\7h\2\2\u00a9\u00a5\3\2\2\2\u00a9\u00a7\3\2\2\2\u00aa"+
		"\16\3\2\2\2\u00ab\u00ac\7V\2\2\u00ac\u00ad\7J\2\2\u00ad\u00ae\7G\2\2\u00ae"+
		"\u00b4\7P\2\2\u00af\u00b0\7v\2\2\u00b0\u00b1\7j\2\2\u00b1\u00b2\7g\2\2"+
		"\u00b2\u00b4\7p\2\2\u00b3\u00ab\3\2\2\2\u00b3\u00af\3\2\2\2\u00b4\20\3"+
		"\2\2\2\u00b5\u00b6\7H\2\2\u00b6\u00b7\7Q\2\2\u00b7\u00bc\7T\2\2\u00b8"+
		"\u00b9\7h\2\2\u00b9\u00ba\7q\2\2\u00ba\u00bc\7t\2\2\u00bb\u00b5\3\2\2"+
		"\2\u00bb\u00b8\3\2\2\2\u00bc\22\3\2\2\2\u00bd\u00be\7V\2\2\u00be\u00c2"+
		"\7Q\2\2\u00bf\u00c0\7v\2\2\u00c0\u00c2\7q\2\2\u00c1\u00bd\3\2\2\2\u00c1"+
		"\u00bf\3\2\2\2\u00c2\24\3\2\2\2\u00c3\u00c4\7U\2\2\u00c4\u00c5\7V\2\2"+
		"\u00c5\u00c6\7G\2\2\u00c6\u00cc\7R\2\2\u00c7\u00c8\7u\2\2\u00c8\u00c9"+
		"\7v\2\2\u00c9\u00ca\7g\2\2\u00ca\u00cc\7r\2\2\u00cb\u00c3\3\2\2\2\u00cb"+
		"\u00c7\3\2\2\2\u00cc\26\3\2\2\2\u00cd\u00ce\7P\2\2\u00ce\u00cf\7G\2\2"+
		"\u00cf\u00d0\7Z\2\2\u00d0\u00d6\7V\2\2\u00d1\u00d2\7p\2\2\u00d2\u00d3"+
		"\7g\2\2\u00d3\u00d4\7z\2\2\u00d4\u00d6\7v\2\2\u00d5\u00cd\3\2\2\2\u00d5"+
		"\u00d1\3\2\2\2\u00d6\30\3\2\2\2\u00d7\u00d8\7F\2\2\u00d8\u00d9\7G\2\2"+
		"\u00d9\u00de\7H\2\2\u00da\u00db\7f\2\2\u00db\u00dc\7g\2\2\u00dc\u00de"+
		"\7h\2\2\u00dd\u00d7\3\2\2\2\u00dd\u00da\3\2\2\2\u00de\32\3\2\2\2\u00df"+
		"\u00e0\7T\2\2\u00e0\u00e1\7G\2\2\u00e1\u00e6\7O\2\2\u00e2\u00e3\7t\2\2"+
		"\u00e3\u00e4\7g\2\2\u00e4\u00e6\7o\2\2\u00e5\u00df\3\2\2\2\u00e5\u00e2"+
		"\3\2\2\2\u00e6\34\3\2\2\2\u00e7\u00e8\7U\2\2\u00e8\u00e9\7V\2\2\u00e9"+
		"\u00ea\7Q\2\2\u00ea\u00f0\7R\2\2\u00eb\u00ec\7u\2\2\u00ec\u00ed\7v\2\2"+
		"\u00ed\u00ee\7q\2\2\u00ee\u00f0\7r\2\2\u00ef\u00e7\3\2\2\2\u00ef\u00eb"+
		"\3\2\2\2\u00f0\36\3\2\2\2\u00f1\u00f2\7G\2\2\u00f2\u00f3\7P\2\2\u00f3"+
		"\u00f8\7F\2\2\u00f4\u00f5\7g\2\2\u00f5\u00f6\7p\2\2\u00f6\u00f8\7f\2\2"+
		"\u00f7\u00f1\3\2\2\2\u00f7\u00f4\3\2\2\2\u00f8 \3\2\2\2\u00f9\u00fa\7"+
		"U\2\2\u00fa\u00fb\7K\2\2\u00fb\u0100\7P\2\2\u00fc\u00fd\7u\2\2\u00fd\u00fe"+
		"\7k\2\2\u00fe\u0100\7p\2\2\u00ff\u00f9\3\2\2\2\u00ff\u00fc\3\2\2\2\u0100"+
		"\"\3\2\2\2\u0101\u0102\7E\2\2\u0102\u0103\7Q\2\2\u0103\u0108\7U\2\2\u0104"+
		"\u0105\7u\2\2\u0105\u0106\7k\2\2\u0106\u0108\7p\2\2\u0107\u0101\3\2\2"+
		"\2\u0107\u0104\3\2\2\2\u0108$\3\2\2\2\u0109\u010a\7V\2\2\u010a\u010b\7"+
		"C\2\2\u010b\u0110\7P\2\2\u010c\u010d\7v\2\2\u010d\u010e\7c\2\2\u010e\u0110"+
		"\7p\2\2\u010f\u0109\3\2\2\2\u010f\u010c\3\2\2\2\u0110&\3\2\2\2\u0111\u0112"+
		"\7C\2\2\u0112\u0113\7V\2\2\u0113\u0118\7P\2\2\u0114\u0115\7c\2\2\u0115"+
		"\u0116\7v\2\2\u0116\u0118\7p\2\2\u0117\u0111\3\2\2\2\u0117\u0114\3\2\2"+
		"\2\u0118(\3\2\2\2\u0119\u011a\7G\2\2\u011a\u011b\7Z\2\2\u011b\u0120\7"+
		"R\2\2\u011c\u011d\7g\2\2\u011d\u011e\7z\2\2\u011e\u0120\7r\2\2\u011f\u0119"+
		"\3\2\2\2\u011f\u011c\3\2\2\2\u0120*\3\2\2\2\u0121\u0122\7C\2\2\u0122\u0123"+
		"\7D\2\2\u0123\u0128\7U\2\2\u0124\u0125\7c\2\2\u0125\u0126\7d\2\2\u0126"+
		"\u0128\7u\2\2\u0127\u0121\3\2\2\2\u0127\u0124\3\2\2\2\u0128,\3\2\2\2\u0129"+
		"\u012a\7N\2\2\u012a\u012b\7Q\2\2\u012b\u0130\7I\2\2\u012c\u012d\7n\2\2"+
		"\u012d\u012e\7q\2\2\u012e\u0130\7i\2\2\u012f\u0129\3\2\2\2\u012f\u012c"+
		"\3\2\2\2\u0130.\3\2\2\2\u0131\u0132\7U\2\2\u0132\u0133\7S\2\2\u0133\u0138"+
		"\7T\2\2\u0134\u0135\7u\2\2\u0135\u0136\7s\2\2\u0136\u0138\7t\2\2\u0137"+
		"\u0131\3\2\2\2\u0137\u0134\3\2\2\2\u0138\60\3\2\2\2\u0139\u013a\7T\2\2"+
		"\u013a\u013b\7P\2\2\u013b\u0140\7F\2\2\u013c\u013d\7t\2\2\u013d\u013e"+
		"\7p\2\2\u013e\u0140\7f\2\2\u013f\u0139\3\2\2\2\u013f\u013c\3\2\2\2\u0140"+
		"\62\3\2\2\2\u0141\u0142\7K\2\2\u0142\u0143\7P\2\2\u0143\u0148\7V\2\2\u0144"+
		"\u0145\7k\2\2\u0145\u0146\7p\2\2\u0146\u0148\7v\2\2\u0147\u0141\3\2\2"+
		"\2\u0147\u0144\3\2\2\2\u0148\64\3\2\2\2\u0149\u014c\5=\37\2\u014a\u014c"+
		"\7a\2\2\u014b\u0149\3\2\2\2\u014b\u014a\3\2\2\2\u014c\u0152\3\2\2\2\u014d"+
		"\u0151\5=\37\2\u014e\u0151\5? \2\u014f\u0151\7a\2\2\u0150\u014d\3\2\2"+
		"\2\u0150\u014e\3\2\2\2\u0150\u014f\3\2\2\2\u0151\u0154\3\2\2\2\u0152\u0150"+
		"\3\2\2\2\u0152\u0153\3\2\2\2\u0153\66\3\2\2\2\u0154\u0152\3\2\2\2\u0155"+
		"\u0157\5? \2\u0156\u0155\3\2\2\2\u0157\u0158\3\2\2\2\u0158\u0156\3\2\2"+
		"\2\u0158\u0159\3\2\2\2\u0159\u0165\3\2\2\2\u015a\u015c\t\2\2\2\u015b\u015d"+
		"\5C\"\2\u015c\u015b\3\2\2\2\u015c\u015d\3\2\2\2\u015d\u015f\3\2\2\2\u015e"+
		"\u0160\5? \2\u015f\u015e\3\2\2\2\u0160\u0161\3\2\2\2\u0161\u015f\3\2\2"+
		"\2\u0161\u0162\3\2\2\2\u0162\u0164\3\2\2\2\u0163\u015a\3\2\2\2\u0164\u0167"+
		"\3\2\2\2\u0165\u0163\3\2\2\2\u0165\u0166\3\2\2\2\u01668\3\2\2\2\u0167"+
		"\u0165\3\2\2\2\u0168\u016a\5? \2\u0169\u0168\3\2\2\2\u016a\u016d\3\2\2"+
		"\2\u016b\u0169\3\2\2\2\u016b\u016c\3\2\2\2\u016c\u016e\3\2\2\2\u016d\u016b"+
		"\3\2\2\2\u016e\u0170\7\60\2\2\u016f\u0171\5? \2\u0170\u016f\3\2\2\2\u0171"+
		"\u0172\3\2\2\2\u0172\u0170\3\2\2\2\u0172\u0173\3\2\2\2\u0173\u017f\3\2"+
		"\2\2\u0174\u0176\t\2\2\2\u0175\u0177\5C\"\2\u0176\u0175\3\2\2\2\u0176"+
		"\u0177\3\2\2\2\u0177\u0179\3\2\2\2\u0178\u017a\5? \2\u0179\u0178\3\2\2"+
		"\2\u017a\u017b\3\2\2\2\u017b\u0179\3\2\2\2\u017b\u017c\3\2\2\2\u017c\u017e"+
		"\3\2\2\2\u017d\u0174\3\2\2\2\u017e\u0181\3\2\2\2\u017f\u017d\3\2\2\2\u017f"+
		"\u0180\3\2\2\2\u0180:\3\2\2\2\u0181\u017f\3\2\2\2\u0182\u0188\7$\2\2\u0183"+
		"\u0184\7^\2\2\u0184\u0187\7$\2\2\u0185\u0187\13\2\2\2\u0186\u0183\3\2"+
		"\2\2\u0186\u0185\3\2\2\2\u0187\u018a\3\2\2\2\u0188\u0189\3\2\2\2\u0188"+
		"\u0186\3\2\2\2\u0189\u018b\3\2\2\2\u018a\u0188\3\2\2\2\u018b\u018c\7$"+
		"\2\2\u018c<\3\2\2\2\u018d\u018e\t\3\2\2\u018e>\3\2\2\2\u018f\u0190\t\4"+
		"\2\2\u0190@\3\2\2\2\u0191\u0192\7-\2\2\u0192B\3\2\2\2\u0193\u0194\7/\2"+
		"\2\u0194D\3\2\2\2\u0195\u0196\7,\2\2\u0196F\3\2\2\2\u0197\u0198\7\61\2"+
		"\2\u0198H\3\2\2\2\u0199\u019a\7`\2\2\u019aJ\3\2\2\2\u019b\u019c\7>\2\2"+
		"\u019cL\3\2\2\2\u019d\u019e\7>\2\2\u019e\u019f\7?\2\2\u019fN\3\2\2\2\u01a0"+
		"\u01a1\7?\2\2\u01a1P\3\2\2\2\u01a2\u01a3\7@\2\2\u01a3R\3\2\2\2\u01a4\u01a5"+
		"\7@\2\2\u01a5\u01a6\7?\2\2\u01a6T\3\2\2\2\u01a7\u01a8\7>\2\2\u01a8\u01a9"+
		"\7@\2\2\u01a9V\3\2\2\2\u01aa\u01ab\7.\2\2\u01abX\3\2\2\2\u01ac\u01ad\7"+
		"=\2\2\u01adZ\3\2\2\2\u01ae\u01af\7\60\2\2\u01af\\\3\2\2\2\u01b0\u01b1"+
		"\7*\2\2\u01b1^\3\2\2\2\u01b2\u01b3\7+\2\2\u01b3`\3\2\2\2\u01b4\u01b5\t"+
		"\5\2\2\u01b5\u01b6\3\2\2\2\u01b6\u01b7\b\61\2\2\u01b7b\3\2\2\2\u01b8\u01ba"+
		"\7\17\2\2\u01b9\u01b8\3\2\2\2\u01b9\u01ba\3\2\2\2\u01ba\u01bb\3\2\2\2"+
		"\u01bb\u01be\7\f\2\2\u01bc\u01be\7\17\2\2\u01bd\u01b9\3\2\2\2\u01bd\u01bc"+
		"\3\2\2\2\u01bed\3\2\2\2.\2ku\177\u008b\u0093\u009e\u00a3\u00a9\u00b3\u00bb"+
		"\u00c1\u00cb\u00d5\u00dd\u00e5\u00ef\u00f7\u00ff\u0107\u010f\u0117\u011f"+
		"\u0127\u012f\u0137\u013f\u0147\u014b\u0150\u0152\u0158\u015c\u0161\u0165"+
		"\u016b\u0172\u0176\u017b\u017f\u0186\u0188\u01b9\u01bd\3\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}